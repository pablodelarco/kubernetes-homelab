---
# This Job patches the emqx-env ConfigMap with credentials from the emqx-credentials Secret
# This allows us to keep credentials in a SealedSecret (encrypted in Git) while EMQX expects them in a ConfigMap
apiVersion: batch/v1
kind: Job
metadata:
  name: emqx-config-patcher
  namespace: emqx
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    spec:
      serviceAccountName: emqx-config-patcher
      restartPolicy: Never
      containers:
        - name: kubectl
          image: bitnami/kubectl:latest
          command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "Waiting for emqx-credentials secret..."
              while ! kubectl get secret emqx-credentials -n emqx >/dev/null 2>&1; do
                sleep 2
              done
              
              echo "Waiting for emqx-env configmap..."
              while ! kubectl get configmap emqx-env -n emqx >/dev/null 2>&1; do
                sleep 2
              done
              
              echo "Extracting credentials from secret..."
              DASHBOARD_USERNAME=$(kubectl get secret emqx-credentials -n emqx -o jsonpath='{.data.dashboard_username}' | base64 -d)
              DASHBOARD_PASSWORD=$(kubectl get secret emqx-credentials -n emqx -o jsonpath='{.data.dashboard_password}' | base64 -d)
              
              echo "Patching emqx-env ConfigMap..."
              kubectl patch configmap emqx-env -n emqx --type merge -p "{\"data\":{\"EMQX_DASHBOARD__DEFAULT_USERNAME\":\"$DASHBOARD_USERNAME\",\"EMQX_DASHBOARD__DEFAULT_PASSWORD\":\"$DASHBOARD_PASSWORD\"}}"
              
              echo "Restarting EMQX to apply new credentials..."
              kubectl rollout restart statefulset emqx -n emqx
              
              echo "Done!"
---
# ServiceAccount for the config patcher job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: emqx-config-patcher
  namespace: emqx
---
# Role with permissions to patch ConfigMap and restart StatefulSet
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: emqx-config-patcher
  namespace: emqx
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "patch"]
  - apiGroups: ["apps"]
    resources: ["statefulsets"]
    verbs: ["get", "patch"]
---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: emqx-config-patcher
  namespace: emqx
subjects:
  - kind: ServiceAccount
    name: emqx-config-patcher
    namespace: emqx
roleRef:
  kind: Role
  name: emqx-config-patcher
  apiGroup: rbac.authorization.k8s.io

